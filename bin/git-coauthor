#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'
require 'set'
require 'yaml'

def fail(message)
  warn(message)
  exit 1
end

options = {
  add:      false,
  list:     false,
  delete:   false,
  session:  false,
  config:   false,
  global:   false
}

parser = OptionParser.new do |opts|
  Version = '1.0.0'

  opts.banner = <<~EOF
    Manages Git coauthors.

    Usage: git coauthor <args>

    To install, add this script to your PATH, then run one of the following:

        # All repos:
        git config --global alias.coauthor '!git-coauthor'
        git config --global alias.ca '!git-coauthor'

        # Current repo only:
        git config alias.coauthor '!git-coauthor'
        git config alias.ca '!git-coauthor'

    Example Usage:
        git coauthor -h                                               # Print help
        git coauthor -v                                               # Print version
        git coauthor --version                                        # Print version

        git coauthor alias...                                         # Add one or more coauthors to the previous commit
        git coauthor --add alias...                                   # Add one or more coauthors to the previous commit
        git coauthor --list                                           # List the coauthors on the previous commit
        git coauthor --delete                                         # Delete all coauthors from the previous commit
        git coauthor --delete alias...                                # Delete one or more coauthors from the previous commit

        git coauthor --config "foo: Foo <foo@bar.com>"                # Add a coauthor to the local config
        git coauthor --config --add "foo: Foo <foo@bar.com>"          # Add a coauthor to the local config
        git coauthor --config --global "foo: Foo <foo@bar.com>"       # Add a coauthor to the global config
        git coauthor --config --add --global "foo: Foo <foo@bar.com>" # Add a coauthor to the global config
        git coauthor --config --list                                  # List the local config
        git coauthor --config --list --global                         # List the global config
        git coauthor --config --delete                                # Delete the local config
        git coauthor --config --delete --global                       # Delete the global config
        git coauthor --config --delete foo                            # Delete one or more coauthors from the local config
        git coauthor --config --delete --global foo                   # Delete one or more coauthors from the global config

        git coauthor --session alias...                               # Add one or more coauthors to the current session
        git coauthor --session --add alias...                         # Add one or more coauthors to the current session
        git coauthor --session --list                                 # List the coauthors in the current session
        git coauthor --session --delete                               # Delete the current session
        git coauthor --session --delete alias...                      # Remove one or more coauthors from the current session

    Options:
  EOF

  opts.on('-a', '--add', 'Add coauthors') do
    options[:add] = true
  end

  opts.on('-l', '--list', 'List coauthors') do
    options[:list] = true
  end

  opts.on('-d', '--delete', 'Delete coauthors') do
    options[:delete] = true
  end

  opts.on('-s', '--session', 'Update session') do
    options[:session] = true
  end

  opts.on('-c', '--config', 'Update configuration') do
    options[:config] = true
  end

  opts.on('-g', '--global', 'Update or print the global coauthor configuration') do
    options[:global] = true
  end
end

parser.parse!

user_file = File.join(Dir.home, '.git-coauthors')
user_config = File.exists?(user_file) ? YAML.load(File.read(user_file)) : {}

repo_file = File.join(Dir.pwd, '.git-coauthors')
repo_config = File.exists?(repo_file) ? YAML.load(File.read(repo_file)) : {}

config = {}
config.merge!(user_config)
config.merge!(repo_config)

def prev_commit_msg
  message = `git log --format=%B -n1`.strip
  if !$?.success? || message.empty?
    fail('fatal: cannot read the previous commit message')
  end
  message + "\n"
end

def without_coauthors(commit_msg)
  commit_msg.split("\n").reject { _1.match(/^ *Co-authored-by:.*$/) }.join("\n").strip + "\n"
end

def coauthor_args(config)
  ARGV.map do |arg|
    fail("fatal: invalid coauthor: #{arg}") unless config[arg]

    "Co-authored-by: #{config[arg]}"
  end
end

def print_config(config)
  max_short = config.map { |short, _| short.size }.max
  config.each do |short, long|
    short += ':'
    puts "#{short.ljust(max_short + 1)} #{long}"
  end
end

case [options[:session], options[:config]]
when [true, false]
  entity = :session
when [false, true]
  entity = :config
else
  entity = :commit
end

case [options[:add], options[:list], options[:delete]]
when [true, false, false]
  action = :add
when [false, true, false]
  action = :list
when [false, false, true]
  action = :delete
else
  action = :add
end

global = options[:global] ? :global : nil
args = ARGV.any? ? :args : nil

params = [entity, action, global, args].compact

case params
# git coauthor config --add "foo: Foo <foo@bar.com>"
when [:config, :add, :args]
  ARGV.each do |arg|
    parts = arg.split(':').map(&:strip)
    fail('fatal: invalid config') unless parts.size == 2
    repo_config[parts[0]] = parts[1]
  end
  contents = repo_config.map { |k, v| "#{k}: #{v}" }.join("\n") + "\n"
  File.write(repo_file, contents)

  print_config(repo_config)
# git coauthor config --add --global "foo: Foo <foo@bar.com>"
when [:config, :add, :global, :args]
  ARGV.each do |arg|
    parts = arg.split(':').map(&:strip)
    fail('fatal: invalid config') unless parts.size == 2
    user_config[parts[0]] = parts[1]
  end
  contents = user_config.map { |k, v| "#{k}: #{v}" }.join("\n") + "\n"
  File.write(user_file, contents)

  print_config(user_config)
# git coauthor config --list
when [:config, :list]
  print_config(repo_config)
# git coauthor config --list --global
when [:config, :list, :global]
  print_config(user_config)
# git coauthor config --delete
when [:config, :delete]
  FileUtils.rm_f(repo_file)
# git coauthor config --delete foo
when [:config, :delete, :args]
  ARGV.each { repo_config.delete(_1) }
  if File.exist?(repo_file)
    if repo_config.empty?
      FileUtils.rm_f(repo_file)
    else
      contents = repo_config.map { |k, v| "#{k}: #{v}" }.join("\n") + "\n"
      File.write(repo_file, contents)

      print_config(repo_config)
    end
  end
# git coauthor config --delete --global
when [:config, :delete, :global]
  FileUtils.rm_f(user_file)
# git coauthor config --delete --global foo
when [:config, :delete, :global, :args]
  ARGV.each { user_config.delete(_1) }
  if File.exist?(user_file)
    contents = user_config.map { |k, v| "#{k}: #{v}" }.join("\n") + "\n"
    File.write(user_file, contents)

    print_config(user_config)
  end
# git coauthor --add foo
when [:commit, :add, :args]
  prev_msg = prev_commit_msg
  msg_without_coauthors = without_coauthors(prev_msg)
  to_add = coauthor_args(config)
  prev_coauthors = prev_msg.split("\n").select { _1.match(/^Co-authored-by:.*/) }
  coauthors = (prev_coauthors + to_add).to_set
  if coauthors.any? 
    message = msg_without_coauthors + "\n" + coauthors.join("\n") + "\n"
  else
    message = msg_without_coauthors + "\n"
  end

  `git commit --amend --only --no-verify --message "#{message}"`
  fail('fatal: cannot ammend the previous commit message') unless $?.success?
  puts coauthors.to_a
# git coauthor --list
when [:commit, :list]
  puts prev_commit_msg.scan(/^ *Co-authored-by:.*$/)
# git coauthor --delete
when [:commit, :delete]
  message = without_coauthors(prev_commit_msg)

  `git commit --amend --only --no-verify --message "#{message}"`
  fail('fatal: cannot ammend the previous commit message') unless $?.success?
# git coauthor --delete foo
when [:commit, :delete, :args]
  prev_msg = prev_commit_msg
  msg_without_coauthors = without_coauthors(prev_msg)
  to_remove = coauthor_args(config)
  prev_coauthors = prev_msg.split("\n").select { _1.match(/^Co-authored-by:.*/) }
  coauthors = prev_coauthors - to_remove
  if coauthors.any? 
    message = msg_without_coauthors + "\n" + coauthors.join("\n") + "\n"
  else
    message = msg_without_coauthors + "\n"
  end

  `git commit --amend --only --no-verify --message "#{message}"`
  fail('fatal: cannot ammend the previous commit message') unless $?.success?
  puts coauthors
# git coauthor session --add foo
when [:session, :add, :args]
  template_path = `git config --get commit.template`.strip
  fail("fatal: git commit template already set to #{template_path}") if $?.success? && template_path != '.git-coauthors-template'

  template = File.exist?('.git-coauthors-template') ? File.read('.git-coauthors-template').strip : ''
  prev_coauthors = template.split("\n").select { _1.match(/^Co-authored-by:.*/) }
  to_add = coauthor_args(config)
  coauthors = (prev_coauthors + to_add).to_set

  File.write('.git-coauthors-template', "\n\n" + coauthors.join("\n") + "\n")
  `git config --local commit.template .git-coauthors-template`
  fail('fatal: cannot set git commit template') unless $?.success? 
  puts coauthors.to_a
# git coauthor session --list
when [:session, :list]
  template_path = `git config --get commit.template`.strip
  fail('fatal: not in a coauthoring session') unless $?.success?
  fail("fatal: git commit template set to #{template_path}") unless template_path == '.git-coauthors-template'
  fail('fatal: git commit template not exist: .git-coauthors-template') unless File.exist?('.git-coauthors-template')
  template = File.read('.git-coauthors-template').strip
  template = template.split("\n").select { _1.match(/^Co-authored-by:.*/) }.join("\n")
  puts template
# git coauthor session --delete
when [:session, :delete]
  `git config --local --unset commit.template`
  fail('fatal: cannot set git commit template') unless $?.success? 
  FileUtils.rm_f('.git-coauthors-template')
# git coauthor session --delete foo
when [:session, :delete, :args]
  template_path = `git config --get commit.template`.strip
  fail('fatal: not in a coauthoring session') unless $?.success?
  fail("fatal: git commit template already set to #{template_path}") unless template_path == '.git-coauthors-template'
  fail('fatal: git commit template not exist: .git-coauthors-template') unless File.exist?('.git-coauthors-template')

  to_remove = coauthor_args(config)
  template = File.read('.git-coauthors-template').strip
  prev_coauthors = template.split("\n").select { _1.match(/^Co-authored-by:.*/) }
  new_coauthors = prev_coauthors - to_remove
  if new_coauthors.any? 
    File.write('.git-coauthors-template', "\n\n" + new_coauthors.join("\n") + "\n")
    puts new_coauthors
  else
    `git config --local --unset commit.template`
    fail('fatal: cannot set git commit template') unless $?.success? 
    FileUtils.rm_f('.git-coauthors-template')
  end
else
  fail('fatal: unexpected arguments or options')
end
